/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as DeployImport } from './routes/deploy'
import { Route as IndexImport } from './routes/index'
import { Route as DeploymentSearchImport } from './routes/deployment/search'
import { Route as DeploymentChainAddressImport } from './routes/deployment/$chain.$address'
import { Route as DeploymentSettingsChainAddressImport } from './routes/deployment/settings.$chain.$address'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const DeployRoute = DeployImport.update({
  id: '/deploy',
  path: '/deploy',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentSearchRoute = DeploymentSearchImport.update({
  id: '/deployment/search',
  path: '/deployment/search',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentChainAddressRoute = DeploymentChainAddressImport.update({
  id: '/deployment/$chain/$address',
  path: '/deployment/$chain/$address',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentSettingsChainAddressRoute =
  DeploymentSettingsChainAddressImport.update({
    id: '/deployment/settings/$chain/$address',
    path: '/deployment/settings/$chain/$address',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/deploy': {
      id: '/deploy'
      path: '/deploy'
      fullPath: '/deploy'
      preLoaderRoute: typeof DeployImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/deployment/search': {
      id: '/deployment/search'
      path: '/deployment/search'
      fullPath: '/deployment/search'
      preLoaderRoute: typeof DeploymentSearchImport
      parentRoute: typeof rootRoute
    }
    '/deployment/$chain/$address': {
      id: '/deployment/$chain/$address'
      path: '/deployment/$chain/$address'
      fullPath: '/deployment/$chain/$address'
      preLoaderRoute: typeof DeploymentChainAddressImport
      parentRoute: typeof rootRoute
    }
    '/deployment/settings/$chain/$address': {
      id: '/deployment/settings/$chain/$address'
      path: '/deployment/settings/$chain/$address'
      fullPath: '/deployment/settings/$chain/$address'
      preLoaderRoute: typeof DeploymentSettingsChainAddressImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deploy': typeof DeployRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/deployment/search': typeof DeploymentSearchRoute
  '/deployment/$chain/$address': typeof DeploymentChainAddressRoute
  '/deployment/settings/$chain/$address': typeof DeploymentSettingsChainAddressRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deploy': typeof DeployRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/deployment/search': typeof DeploymentSearchRoute
  '/deployment/$chain/$address': typeof DeploymentChainAddressRoute
  '/deployment/settings/$chain/$address': typeof DeploymentSettingsChainAddressRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/deploy': typeof DeployRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/deployment/search': typeof DeploymentSearchRoute
  '/deployment/$chain/$address': typeof DeploymentChainAddressRoute
  '/deployment/settings/$chain/$address': typeof DeploymentSettingsChainAddressRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deploy'
    | '/privacy'
    | '/terms'
    | '/deployment/search'
    | '/deployment/$chain/$address'
    | '/deployment/settings/$chain/$address'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deploy'
    | '/privacy'
    | '/terms'
    | '/deployment/search'
    | '/deployment/$chain/$address'
    | '/deployment/settings/$chain/$address'
  id:
    | '__root__'
    | '/'
    | '/deploy'
    | '/privacy'
    | '/terms'
    | '/deployment/search'
    | '/deployment/$chain/$address'
    | '/deployment/settings/$chain/$address'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeployRoute: typeof DeployRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  DeploymentSearchRoute: typeof DeploymentSearchRoute
  DeploymentChainAddressRoute: typeof DeploymentChainAddressRoute
  DeploymentSettingsChainAddressRoute: typeof DeploymentSettingsChainAddressRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeployRoute: DeployRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  DeploymentSearchRoute: DeploymentSearchRoute,
  DeploymentChainAddressRoute: DeploymentChainAddressRoute,
  DeploymentSettingsChainAddressRoute: DeploymentSettingsChainAddressRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/deploy",
        "/privacy",
        "/terms",
        "/deployment/search",
        "/deployment/$chain/$address",
        "/deployment/settings/$chain/$address"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/deploy": {
      "filePath": "deploy.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/deployment/search": {
      "filePath": "deployment/search.tsx"
    },
    "/deployment/$chain/$address": {
      "filePath": "deployment/$chain.$address.tsx"
    },
    "/deployment/settings/$chain/$address": {
      "filePath": "deployment/settings.$chain.$address.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
