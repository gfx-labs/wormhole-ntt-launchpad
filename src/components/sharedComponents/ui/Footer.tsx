import {
  Footer as BaseFooter,
  ContainerPadding,
  InnerContainer,
  breakpointMediaQuery,
} from '@bootnodedev/db-ui-toolkit'
import { Link as BaseLink } from '@tanstack/react-router'
import type { ComponentPropsWithoutRef, FC } from 'react'
import styled, { css } from 'styled-components'

export const Wrapper = styled(BaseFooter)`
  margin-top: calc(var(--base-gap) * 7);
  padding-bottom: calc(var(--base-gap) * 7);
`

const Inner = styled(InnerContainer)`
  flex-direction: column;
  justify-content: space-between;
  row-gap: var(--base-gap);

  ${ContainerPadding}

  ${breakpointMediaQuery(
    'tabletPortraitStart',
    css`
        flex-direction: row;
      `,
  )}
`

const LogoWrapper = styled.svg`
  display: block;
  fill: none;
  height: 30px;
  width: 30px;
`

const Logo: FC<ComponentPropsWithoutRef<'svg'>> = () => (
  <LogoWrapper
    viewBox="0 0 30 30"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clipPath="url(#clip0_512_1169)">
      <path
        d="M23.25 20.5112C22.3905 22.0067 20.8002 22.9264 19.0767 22.9264H16.2895V13.5279L12.2666 20.5134C11.407 22.0089 9.81678 22.9285 8.09329 22.9285H5.3254V9.05857H10.8934V18.4334L16.2895 9.06287V9.05857H21.8554V18.4721L27.7028 8.31296C27.9392 7.9004 27.9348 7.38901 27.6791 6.9872C24.9822 2.72845 20.2006 -0.0799198 14.768 0.00173436C6.4837 0.130657 -0.0427647 6.79811 0.000211021 15.0815C0.0431867 23.3281 6.74373 30 15.0001 30C23.2564 30 30 23.2852 30 15.002C30 13.6675 29.8238 12.3741 29.4951 11.1407C29.3962 10.7668 28.8976 10.698 28.7042 11.0311L23.2479 20.5091L23.25 20.5112Z"
        fill="white"
      />
    </g>
    <defs>
      <clipPath id="clip0_512_1169">
        <rect
          width="30"
          height="30"
          fill="white"
        />
      </clipPath>
    </defs>
  </LogoWrapper>
)

const Start = styled.div`
  align-items: center;
  row-gap: var(--base-gap);
  display: flex;
  flex-direction: column;


  ${breakpointMediaQuery(
    'tabletPortraitStart',
    css`
        flex-direction: row;
        column-gap: var(--base-gap-xl);
      `,
  )}
`

const Text = styled.span`
  color: var(--theme-footer-text-color-light);
  font-size: 1.2rem;
  line-height: 1.2;
  opacity: 0.8;
`

const BNLogoWrapper = styled.svg`
  display: block;
  fill: none;
  height: 20px;
  opacity: 0.6;
  width: 85px;
`

const ExternalLink = styled.a`
  margin: 0 auto;
  padding-top: var(--base-gap);
  text-decoration: none;

  ${breakpointMediaQuery(
    'tabletPortraitStart',
    css`
      margin: 0;
      padding: 0;
      `,
  )}
`

const Link = styled(BaseLink)`
  color: var(--theme-footer-text-color);
  font-size: 1.2rem;
  line-height: 1.2;
  opacity: 0.8;
  text-decoration: none;

  &:hover {
    text-decoration: underline;
  }
`

ExternalLink.defaultProps = {
  target: '_blank',
  rel: 'noopener noreferrer',
}

const BNLogo = () => (
  <BNLogoWrapper
    viewBox="0 0 85 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M1.00781 14.5V5.96875H3.54492C3.89648 5.97266 4.24023 6.01953 4.57617 6.10938C4.91211 6.19531 5.21094 6.33008 5.47266 6.51367C5.73438 6.69727 5.94336 6.93164 6.09961 7.2168C6.25586 7.50195 6.33203 7.84375 6.32812 8.24219C6.32422 8.46484 6.28711 8.66797 6.2168 8.85156C6.15039 9.03516 6.05859 9.19922 5.94141 9.34375C5.82031 9.49219 5.68555 9.61719 5.53711 9.71875C5.39258 9.82031 5.2168 9.91602 5.00977 10.0059V10.0234C5.22461 10.0742 5.43164 10.166 5.63086 10.2988C5.83008 10.4316 5.99414 10.5781 6.12305 10.7383C6.25977 10.9141 6.36523 11.1113 6.43945 11.3301C6.51758 11.5488 6.55664 11.7852 6.55664 12.0391C6.56055 12.4375 6.48438 12.7891 6.32812 13.0938C6.17188 13.3984 5.96289 13.6523 5.70117 13.8555C5.43945 14.0625 5.13672 14.2207 4.79297 14.3301C4.45312 14.4395 4.10156 14.4961 3.73828 14.5H1.00781ZM2.09766 10.5098V13.5801H3.76758C3.99414 13.5762 4.20898 13.5391 4.41211 13.4688C4.61523 13.3945 4.79492 13.293 4.95117 13.1641C5.10742 13.0352 5.23047 12.877 5.32031 12.6895C5.41406 12.502 5.46094 12.2891 5.46094 12.0508C5.46484 11.8086 5.42383 11.5938 5.33789 11.4062C5.25586 11.2188 5.14062 11.0586 4.99219 10.9258C4.84375 10.7969 4.66992 10.6973 4.4707 10.627C4.27148 10.5566 4.05664 10.5176 3.82617 10.5098H2.09766ZM2.09766 9.60742H3.60938C3.8125 9.60352 4.01172 9.57227 4.20703 9.51367C4.40234 9.45117 4.57617 9.36133 4.72852 9.24414C4.88086 9.13086 5.00391 8.99023 5.09766 8.82227C5.19141 8.6543 5.23828 8.45898 5.23828 8.23633C5.23828 7.99805 5.19141 7.79492 5.09766 7.62695C5.00781 7.45898 4.88672 7.32031 4.73438 7.21094C4.57812 7.10547 4.39844 7.02734 4.19531 6.97656C3.99609 6.92578 3.79102 6.89844 3.58008 6.89453H2.09766V9.60742ZM12.4043 14.5L12.3398 13.627C12.1289 13.9395 11.8652 14.1836 11.5488 14.3594C11.2324 14.5312 10.8672 14.6172 10.4531 14.6172C10.1211 14.6172 9.82031 14.5664 9.55078 14.4648C9.28125 14.3594 9.05078 14.1973 8.85938 13.9785C8.66797 13.7598 8.51953 13.4824 8.41406 13.1465C8.3125 12.8066 8.26172 12.4004 8.26172 11.9277V8.16016H9.3457V11.9395C9.3457 12.2832 9.37305 12.5684 9.42773 12.7949C9.48242 13.0215 9.56445 13.2012 9.67383 13.334C9.7832 13.4707 9.91602 13.5664 10.0723 13.6211C10.2324 13.6758 10.416 13.7031 10.623 13.7031C10.8652 13.7031 11.082 13.6758 11.2734 13.6211C11.4648 13.5625 11.6309 13.4824 11.7715 13.3809C11.8887 13.2988 11.9902 13.2012 12.0762 13.0879C12.166 12.9707 12.2402 12.8438 12.2988 12.707V8.16016H13.3887V14.5H12.4043ZM15.6035 8.16016H18.8438V13.5625H20.9121V14.5H15.6035V13.5625H17.7598V9.10352H15.6035V8.16016ZM17.6191 6.49609C17.6191 6.40234 17.6328 6.31445 17.6602 6.23242C17.6914 6.15039 17.7383 6.08008 17.8008 6.02148C17.8516 5.9707 17.916 5.93164 17.9941 5.9043C18.0762 5.87305 18.168 5.85742 18.2695 5.85742C18.3711 5.85742 18.4609 5.87305 18.5391 5.9043C18.6172 5.93164 18.6816 5.9707 18.7324 6.02148C18.7949 6.07617 18.8418 6.14453 18.873 6.22656C18.9043 6.30859 18.9199 6.39844 18.9199 6.49609C18.9199 6.67188 18.8652 6.81836 18.7559 6.93555C18.6465 7.05273 18.4844 7.11133 18.2695 7.11133C18.0508 7.11133 17.8867 7.05273 17.7773 6.93555C17.6719 6.81836 17.6191 6.67188 17.6191 6.49609ZM22.8105 5.5H26.0508V13.5625H28.1191V14.5H22.8105V13.5625H24.9668V6.44336H22.8105V5.5ZM32.4141 6.625V8.16016H34.8281V8.99805H32.4141V12.4434C32.4141 12.6895 32.4453 12.8926 32.5078 13.0527C32.5703 13.2129 32.6562 13.3398 32.7656 13.4336C32.875 13.5312 33 13.5996 33.1406 13.6387C33.2852 13.6777 33.4375 13.6973 33.5977 13.6973C33.7148 13.6973 33.8359 13.6914 33.9609 13.6797C34.0859 13.6641 34.209 13.6465 34.3301 13.627C34.4473 13.6074 34.5566 13.5879 34.6582 13.5684C34.7637 13.5449 34.8496 13.5254 34.916 13.5098L35.0684 14.2773C34.9785 14.332 34.8691 14.3809 34.7402 14.4238C34.6113 14.4629 34.4707 14.4961 34.3184 14.5234C34.166 14.5547 34.0039 14.5781 33.832 14.5938C33.6641 14.6094 33.4961 14.6172 33.3281 14.6172C33.0469 14.6172 32.7832 14.5781 32.5371 14.5C32.2949 14.418 32.084 14.2891 31.9043 14.1133C31.7246 13.9414 31.582 13.7188 31.4766 13.4453C31.375 13.168 31.3242 12.834 31.3242 12.4434V8.99805H29.6602V8.16016H31.3242V6.625H32.4141ZM49.6348 11.4004C49.6348 11.6777 49.6133 11.9453 49.5703 12.2031C49.5312 12.457 49.4727 12.6953 49.3945 12.918C49.2891 13.2109 49.1504 13.4746 48.9785 13.709C48.8105 13.9395 48.6074 14.1309 48.3691 14.2832C48.1973 14.3887 48.0078 14.4707 47.8008 14.5293C47.5977 14.5879 47.377 14.6172 47.1387 14.6172C46.8652 14.6172 46.6152 14.584 46.3887 14.5176C46.166 14.4512 45.9648 14.3555 45.7852 14.2305C45.6992 14.168 45.6172 14.0996 45.5391 14.0254C45.4609 13.9512 45.3867 13.8691 45.3164 13.7793L45.2637 14.5H44.2676V5.5H45.3516V8.83984C45.4414 8.72656 45.541 8.625 45.6504 8.53516C45.7598 8.44141 45.877 8.36133 46.002 8.29492C46.1582 8.21289 46.3301 8.15039 46.5176 8.10742C46.7051 8.06445 46.9082 8.04297 47.127 8.04297C47.4004 8.04297 47.6523 8.08008 47.8828 8.1543C48.1133 8.22852 48.3223 8.33203 48.5098 8.46484C48.6777 8.58984 48.8281 8.74219 48.9609 8.92188C49.0938 9.09766 49.2109 9.29492 49.3125 9.51367C49.418 9.75977 49.498 10.0332 49.5527 10.334C49.6074 10.6309 49.6348 10.9453 49.6348 11.2773V11.4004ZM48.5508 11.2773C48.5508 11.0781 48.5371 10.8848 48.5098 10.6973C48.4863 10.5059 48.4492 10.3262 48.3984 10.1582C48.3281 9.95117 48.2363 9.76172 48.123 9.58984C48.0098 9.41797 47.8711 9.2832 47.707 9.18555C47.5938 9.11523 47.4668 9.06055 47.3262 9.02148C47.1855 8.98242 47.0293 8.96289 46.8574 8.96289C46.6699 8.96289 46.498 8.98828 46.3418 9.03906C46.1855 9.08594 46.0469 9.15234 45.9258 9.23828C45.8008 9.32812 45.6895 9.43359 45.5918 9.55469C45.498 9.67188 45.418 9.80078 45.3516 9.94141V12.7129C45.4219 12.8535 45.5039 12.9844 45.5977 13.1055C45.6953 13.2227 45.8066 13.3262 45.9316 13.416C46.0566 13.5059 46.1973 13.5762 46.3535 13.627C46.5098 13.6738 46.6816 13.6973 46.8691 13.6973C47.0488 13.6973 47.2129 13.6758 47.3613 13.6328C47.5098 13.5859 47.6426 13.5195 47.7598 13.4336C47.916 13.3242 48.0469 13.1855 48.1523 13.0176C48.2578 12.8496 48.3418 12.6621 48.4043 12.4551C48.4551 12.2988 48.4922 12.1309 48.5156 11.9512C48.5391 11.7715 48.5508 11.5879 48.5508 11.4004V11.2773ZM51.9785 17.0605C51.877 17.0605 51.7578 17.0488 51.6211 17.0254C51.4844 17.002 51.3809 16.9824 51.3105 16.9668L51.4863 16.082C51.584 16.0898 51.6797 16.0957 51.7734 16.0996C51.8711 16.1074 51.9473 16.1113 52.002 16.1113C52.1504 16.1113 52.2852 16.0703 52.4062 15.9883C52.5312 15.9062 52.6426 15.8086 52.7402 15.6953C52.834 15.582 52.9141 15.4648 52.9805 15.3438C53.0508 15.2227 53.1055 15.123 53.1445 15.0449L53.5781 14.2012L50.8477 8.16016H52.0605L53.8008 12.25L54.082 13.0176L54.3809 12.2734L56.0156 8.16016H57.2285L54.0117 15.4785C53.9375 15.6426 53.8418 15.8164 53.7246 16C53.6113 16.1836 53.4727 16.3535 53.3086 16.5098C53.1445 16.666 52.9531 16.7969 52.7344 16.9023C52.5156 17.0078 52.2637 17.0605 51.9785 17.0605Z"
      fill="white"
    />
    <g clipPath="url(#clip0_512_1177)">
      <path
        d="M84.332 8.88799C83.9045 8.1527 83.2692 7.55858 82.5033 7.17623C81.7106 6.78505 80.8348 6.58799 79.9502 6.59976C79.1367 6.59093 78.3322 6.78505 77.6138 7.16152C76.9309 7.52034 76.3491 8.03505 75.9156 8.6674C75.4881 8.12623 74.9538 7.67034 74.3481 7.32917C73.4872 6.84976 72.5105 6.60564 71.5219 6.6174C70.6283 6.60858 69.7466 6.82034 68.9598 7.23505C68.6511 7.39681 68.3602 7.59093 68.093 7.81446V3.52917C68.0989 3.39093 68.0781 3.25564 68.0277 3.12623C67.9772 2.99681 67.9 2.88211 67.802 2.78505C67.7041 2.68799 67.5853 2.61152 67.4547 2.56446C67.3211 2.51446 67.1816 2.49387 67.042 2.49976C66.7719 2.49681 66.5106 2.59387 66.3147 2.77623C66.2108 2.87329 66.1306 2.98799 66.0772 3.1174C66.0208 3.24681 65.997 3.38799 66 3.52623V12.1733C66.0119 13.1292 66.2731 14.0645 66.76 14.888C67.232 15.685 67.9119 16.3439 68.7283 16.7968C69.5773 17.2674 70.5363 17.5086 71.51 17.4998C72.4986 17.5145 73.4753 17.2674 74.3363 16.7909C75.1616 16.3262 75.8444 15.6527 76.3134 14.8409C76.8003 13.9909 77.0497 13.0321 77.0378 12.0556V10.9615C77.0319 10.5498 77.1566 10.1468 77.3941 9.81152C77.6553 9.44976 78.0086 9.15858 78.4213 8.97623C78.8992 8.76152 79.4217 8.65564 79.9472 8.66446C80.4816 8.65564 81.01 8.7674 81.4939 8.99387C81.9244 9.2027 82.2836 9.53211 82.5241 9.94387C82.8031 10.4586 82.9367 11.038 82.91 11.6203V16.4674C82.91 16.7409 83.0198 17.0027 83.2158 17.1939C83.4117 17.388 83.6759 17.4968 83.955 17.4968C84.2341 17.4968 84.4983 17.388 84.6942 17.1939C84.8902 16.9998 85 16.738 85 16.4674V11.6027C85.0267 10.6556 84.7981 9.7174 84.335 8.88799H84.332ZM69.7644 9.04976C70.1563 8.82034 70.5927 8.67034 71.0469 8.60858C71.4981 8.54681 71.9613 8.57329 72.4006 8.68799C72.843 8.8027 73.2556 9.0027 73.6178 9.27623C73.98 9.54976 74.2828 9.89387 74.5114 10.2821C74.7816 10.7498 74.9359 11.2733 74.9597 11.8115V12.0909C74.9597 12.1203 74.9597 12.1468 74.9597 12.1762C74.9508 12.7527 74.7964 13.3203 74.5084 13.8233C74.2145 14.3321 73.79 14.7586 73.2764 15.0586C72.7391 15.3556 72.1334 15.5115 71.5159 15.5115C70.8984 15.5115 70.2928 15.3556 69.7555 15.0586C69.2389 14.7645 68.8144 14.338 68.5264 13.8233C68.2236 13.2762 68.0692 12.6645 68.0781 12.0409C68.0663 11.4203 68.2206 10.8115 68.5264 10.2674C68.8203 9.75858 69.2448 9.33799 69.7584 9.04681L69.7644 9.04976Z"
        fill="white"
      />
    </g>
    <defs>
      <clipPath id="clip0_512_1177">
        <rect
          width="19"
          height="15"
          fill="white"
          transform="translate(66 2.5)"
        />
      </clipPath>
    </defs>
  </BNLogoWrapper>
)

export const Footer: FC = ({ ...restProps }) => {
  return (
    <Wrapper {...restProps}>
      <Inner>
        <Start>
          <Logo />
          <Text>Ⓒ Wormhole. All Rights Reserved.</Text>
          <Link
            target="_blank"
            href="https://wormhole.com/pages/terms-of-use"
          >
            Terms of use
          </Link>
          <Link
            target="_blank"
            to="https://wormhole.com/pages/data-protection-and-privacy-policy"
          >
            Privacy Policy
          </Link>
        </Start>
        <ExternalLink
          href="https://www.bootnode.dev/"
          title="Building the future of Web3"
        >
          <BNLogo />
        </ExternalLink>
      </Inner>
    </Wrapper>
  )
}
